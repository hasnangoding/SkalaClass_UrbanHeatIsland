// AOI
var aoi = ee.Geometry.Polygon(
    [[[110.23777007001516,-8.271943554341464],
      [111.41330717939016,-7.090644732978145],
      [110.23777007001516,-7.090644732978145],
      [110.23777007001516,-8.271943554341464]]]);
var startDate = '2023-01-01';
var endDate = '2023-12-31';

// *****************************************************************************************
// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.*').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

// Cloud mask
function maskL8sr(col) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  // Get the pixel QA band.
  var qa = col.select('QA_PIXEL');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
               .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return col.updateMask(mask);
}

// Filter the collection, first by the aoi, and then by date.
var image = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate(startDate, endDate)
  .filterBounds(aoi)
  .map(applyScaleFactors)
  .map(maskL8sr)
  .median();

var visualization = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0.0,
  max: 0.3,
};

Map.addLayer(image, visualization, 'True Color (432)', false);

// NDVI
var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
Map.addLayer(ndvi, {min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'NDVI', false);

// NDVI statistics
var ndvi_min = ee.Number(ndvi.reduceRegion({
  reducer: ee.Reducer.min(),
  geometry: aoi,
  scale: 30,
  maxPixels: 1e9
}).values().get(0));

var ndvi_max = ee.Number(ndvi.reduceRegion({
  reducer: ee.Reducer.max(),
  geometry: aoi,
  scale: 30,
  maxPixels: 1e9
}).values().get(0));

// Fraction of vegetation
var fv = (ndvi.subtract(ndvi_min).divide(ndvi_max.subtract(ndvi_min))).pow(ee.Number(2))
          .rename('FV');

var em = fv.multiply(ee.Number(0.004)).add(ee.Number(0.986)).rename('EM');

var thermal = image.select('ST_B10').rename('thermal');

var lst = thermal.expression(
  '(tb / (1 + (0.00115 * (tb/0.48359547432)) * log(em))) - 273.15',
  {'tb': thermal.select('thermal'), 'em': em}).rename('LST');

var lst_vis = {
  min: 25,
  max: 70,
  palette: [
    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',
    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',
    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',
    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',
    'ff0000', 'de0101', 'c21301', 'a71001', '911003'
  ]
};

Map.addLayer(lst, lst_vis, 'LST AOI');
Map.centerObject(aoi, 10);

// Urban Heat Island ***********************************************************************

// 1. Normalized UHI
var lst_mean = ee.Number(lst.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: aoi,
  scale: 30,
  maxPixels: 1e9
}).values().get(0));

var lst_std = ee.Number(lst.reduceRegion({
  reducer: ee.Reducer.stdDev(),
  geometry: aoi,
  scale: 30,
  maxPixels: 1e9
}).values().get(0));

print('Mean LST in AOI', lst_mean);
print('STD LST in AOI', lst_std);

// Export the LST image to Drive
Export.image.toDrive({
  image: lst,  // Export the LST image
  description: 'LST_Polygon_2023',  // Unique description for the export
  scale: 30,  // Set the scale (resolution)
  region: aoi,  // Export the area of interest
  maxPixels: 1e13,  // Set a high limit for pixels
  fileFormat: 'GeoTIFF'  // Specify the file format
});
